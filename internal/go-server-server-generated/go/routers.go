/*
 * API Avito shop
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

/**
 * @package swagger
 * Файл routers.go
 * Является собирательным объектом всех путей в API
 */

import (
	"fmt"
	"net/http"
	"os"
	"strings"

	"github.com/gorilla/mux"
	"github.com/jackc/pgx/v4/pgxpool"

	"github.com/Experticon/avito_2025winter/internal/jwtutil"
	"github.com/Experticon/avito_2025winter/internal/repository"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc func(repo *repository.Repository) http.HandlerFunc
}

type Routes []Route

func NewRouter(db *pgxpool.Pool) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)

	repo := repository.NewRepository(db)

	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc(repo)

		// Добавляем логгер
		handler = Logger(handler, route.Name)

		// Применяем jwtutil.AuthMiddleware ко всем, кроме ApiAuthPost
		if route.Name != "ApiAuthPost" {
			handler = jwtutil.AuthMiddleware(handler)
		}

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	swaggerPath := "../pkg/swagger-ui/dist"
	swaggerYAMLPath := "../internal/go-server-server-generated/api/swagger.yaml"

	if os.Getenv("DOCKER_ENV") == "true" {
		swaggerPath = "/app/swagger-ui"
		swaggerYAMLPath = "/app/swagger.yaml"
	}

	// Раздаём Swagger UI
	router.PathPrefix("/swagger/").Handler(http.StripPrefix("/swagger/", http.FileServer(http.Dir(swaggerPath))))

	// Раздаём swagger.yaml
	router.HandleFunc("/swagger.yaml", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, swaggerYAMLPath)
	}).Methods("GET")

	return router
}

func Index(repo *repository.Repository) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello World!")
	}
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"ApiAuthPost",
		strings.ToUpper("Post"),
		"/api/auth",
		ApiAuthPost,
	},

	Route{
		"ApiBuyItemGet",
		strings.ToUpper("Get"),
		"/api/buy/{item}",
		ApiBuyItemGet,
	},

	Route{
		"ApiInfoGet",
		strings.ToUpper("Get"),
		"/api/info",
		ApiInfoGet,
	},

	Route{
		"ApiSendCoinPost",
		strings.ToUpper("Post"),
		"/api/sendCoin",
		ApiSendCoinPost,
	},
}
